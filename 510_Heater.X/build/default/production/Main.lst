CCS PCD C Compiler, Version 5.074, 35380               05-Feb-18 15:10

               Filename:   C:\Users\SinghHy\Documents\PIC Micro\510_Heater.X\build\default\production\Main.lst

               ROM used:   1338 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   179 (1%) at main() level
                           237 (1%) worst case
               Stack used: 56 locations (14 in main + 42 for interrupts)
               Stack size: 128

*
00000:  GOTO    484
*
00056:  DATA    2C,02,00
.................... /********************************************************************** 
.................... * Temperature Control  
.................... * © PerkinElmer Health Sciences Canada, Inc., 2017 
.................... * This program is for Heater control U26.  
.................... * FileName:        Main.c 
.................... * Dependencies:    Header (33FJ256GP710A.h) files 
.................... * Processor:       dsPIC33FJ256GP510A 
.................... * Compiler:        CCS v5.074 or Higher 
.................... * Version:      
.................... ************************************************************************/ 
....................  
.................... #include <33FJ256GP510.h> 
.................... //////////// Standard Header file for the DSPIC33FJ256GP510 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device DSPIC33FJ256GP510 
*
003C0:  MOV     W5,[W15++]
003C2:  MOV     #C,W5
003C4:  REPEAT  #4
003C6:  MOV     [W5++],[W15++]
003C8:  MOV     W0,W4
003CA:  MOV     W1,W5
003CC:  MOV     W3,W7
003CE:  MOV     W2,W6
003D0:  BCLR.B  42.0
003D2:  BCLR.B  42.1
003D4:  RLC     W1,W1
003D6:  SWAP    W1
003D8:  AND     #FF,W1
003DA:  CP0     W1
003DC:  BRA     Z,474
003DE:  BCLR.B  42.0
003E0:  BCLR.B  42.1
003E2:  RLC     W3,W3
003E4:  SWAP    W3
003E6:  AND     #FF,W3
003E8:  CP0     W3
003EA:  BRA     Z,474
003EC:  ZE      W0,W0
003EE:  ADD.B   W3L,W1L,W0L
003F0:  BRA     C,3FA
003F2:  SUB     #7F,W0
003F4:  BRA     Z,474
003F6:  BRA     NC,474
003F8:  BRA     3FE
003FA:  ADD.B   #81,W0L
003FC:  BRA     C,474
003FE:  XOR     W5,W7,W10
00400:  BCLR.B  42.0
00402:  BCLR.B  42.1
00404:  AND     #FF,W5
00406:  BSET    W5.7
00408:  BCLR.B  42.0
0040A:  AND     #FF,W7
0040C:  BSET    W7.7
0040E:  MUL.UU  W4,W6,W2
00410:  MUL.UU  W5,W6,W8
00412:  ADDC    W8,W3,W3
00414:  MOV     W9,W1
00416:  BTSC.B  42.0
00418:  INC     W1,W1
0041A:  BCLR.B  42.0
0041C:  MUL.UU  W7,W4,W8
0041E:  ADDC    W8,W3,W3
00420:  ADDC    W9,W1,W1
00422:  MUL.UU  W5,W7,W8
00424:  ADDC    W8,W1,W1
00426:  INC     W0,W0
00428:  CP0     W1
0042A:  BTSC.B  42.1
0042C:  BRA     430
0042E:  BRA     436
00430:  CP0     W3
00432:  BTSC.B  42.1
00434:  BRA     440
00436:  BTSC    W1.F
00438:  BRA     440
0043A:  RLC     W3,W3
0043C:  RLC     W1,W1
0043E:  DEC     W0,W0
00440:  MOV     W1,W2
00442:  BCLR.B  42.0
00444:  BTSS    W3.7
00446:  BRA     45A
00448:  MOV     #FF00,W7
0044A:  AND     W3,W7,W3
0044C:  ADD     #100,W3
0044E:  ADDC    W2,#0,W2
00450:  CP0     W2
00452:  BRA     NZ,45A
00454:  CP0     W3
00456:  BRA     NZ,45A
00458:  INC     W0,W0
0045A:  SWAP    W0
0045C:  BCLR.B  42.0
0045E:  BCLR.B  42.1
00460:  RRC     W0,W1
00462:  BTSC    W10.F
00464:  BSET    W1.F
00466:  BCLR    W2.F
00468:  SWAP    W2
0046A:  XOR.B   W2L,W1L,W1L
0046C:  SWAP    W3
0046E:  MOV.B   W3L,W2L
00470:  MOV     W2,W0
00472:  BRA     47A
00474:  MOV     #0,W0
00476:  MOV     #0,W1
00478:  BRA     47A
0047A:  MOV     #14,W5
0047C:  REPEAT  #4
0047E:  MOV     [--W15],[W5--]
00480:  MOV     [--W15],W5
00482:  RETURN  
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #device ADC = 12  
.................... #use delay(crystal = 40Mhz) 
.................... #use spi(SLAVE, SPI2, BITS = 8, MODE = 1, ENABLE = PIN_G9, stream = SPI_2) 
*
00200:  MOV     W5,[W15++]
00202:  MOV     #8,W3
00204:  CP      W2,#8
00206:  BRA     Z,216
00208:  MOV     #9,W3
0020A:  CP      W2,#10
0020C:  BRA     Z,216
0020E:  MOV     #A,W3
00210:  CP      W2,#18
00212:  BRA     Z,216
00214:  MOV     #B,W3
00216:  BTSS.B  260.0
00218:  BRA     216
0021A:  MOV.B   268,W0L
0021C:  MOV.B   W0L,[W3--]
0021E:  BCLR.B  260.6
00220:  SUB.B   #8,W2L
00222:  BRA     GTU,216
00224:  MOV     W4,W0
00226:  MOV     W5,W1
00228:  MOV     [--W15],W5
0022A:  RETURN  
....................  
....................  
.................... #define Heater1 PIN_F2 
.................... #define Heater2 PIN_F3 
.................... #define Heater3 PIN_F4 
.................... #define Heater4 PIN_F5 
....................  
.................... /******************************************************************************/ 
.................... // Moving Average FIlter Parameters 
.................... // Alpha = 0.1611328125 = 660/4096 ; 660 is maximum temperature value; 5mV/ 1C change 
.................... #define Sample_Length  20 
.................... float Alpha = 0.1611328125; 
.................... float Cofficent = (1/(float)Sample_Length) * Alpha; 
.................... /******************************************************************************/ 
.................... // PID Parameters// 
....................  
.................... /******************************************************************************/ 
....................  
.................... int8 SPI_Flag = 0, Byte_Count = 0, Rx, Tx, Cmand, ProbeID = 2,count = 0; 
.................... int8 Version = 7; 
.................... int8 PWM1 = 0, PWM2 = 0, PWM3 = 0, PWM4 = 0; 
.................... int8 AmpSPI1 = 15, AmpSPI2 = 25, AmpSPI3 = 35, AmpSPI4 = 45; 
.................... float Current1, Current2, Current3, Current4;  // 
.................... int Value, duty1, duty2, duty3, duty4; 
....................  
....................  
.................... /******************************************************************************/ 
.................... // 8 bits SPI 
.................... #INT_SPI2 
....................  
.................... void spi2_slave_isr(void) 
0022C:  PUSH    42
0022E:  PUSH    36
00230:  PUSH    32
00232:  MOV     W0,[W15++]
00234:  MOV     #2,W0
00236:  REPEAT  #C
00238:  MOV     [W0++],[W15++]
.................... { 
....................   Rx = spi_xfer_in(SPI_2, 8); 
0023A:  MOV     #8,W2
0023C:  CALL    200
00240:  MOV.B   W0L,80B
....................   Byte_Count++;  
00242:  INC.B   080A
....................   
....................   switch(Byte_Count) 
00244:  MOV.B   80A,W0L
00246:  SE      W0,W0
00248:  XOR     #1,W0
0024A:  BRA     Z,25A
0024C:  XOR     #3,W0
0024E:  BRA     Z,292
00250:  XOR     #1,W0
00252:  BRA     Z,2DE
00254:  XOR     #7,W0
00256:  BRA     Z,340
00258:  BRA     3A8
....................             { 
....................             case 1: 
....................                 spi_prewrite(Version); 
0025A:  MOV.B   810,W0L
0025C:  MOV.B   W0L,800
0025E:  MOV.B   800,W0L
00260:  MOV.B   W0L,268
00262:  MOV.B   #1,W0L
00264:  MOV.B   W0L,800
....................                 if(Cmand == 1) 
00266:  MOV.B   80D,W0L
00268:  SE      W0,W0
0026A:  CP      W0,#1
0026C:  BRA     NZ,27C
....................                     spi_prewrite(0); 
0026E:  CLR.B   800
00270:  MOV.B   800,W0L
00272:  MOV.B   W0L,268
00274:  MOV.B   #1,W0L
00276:  MOV.B   W0L,800
00278:  GOTO    28E
....................                 else if(Cmand == 2) 
0027C:  MOV.B   80D,W0L
0027E:  SE      W0,W0
00280:  CP      W0,#2
00282:  BRA     NZ,28E
....................                     spi_prewrite(0); 
00284:  CLR.B   800
00286:  MOV.B   800,W0L
00288:  MOV.B   W0L,268
0028A:  MOV.B   #1,W0L
0028C:  MOV.B   W0L,800
....................                 break; 
0028E:  GOTO    3AE
....................        
....................             case 2:  
....................                 Cmand = Rx; 
00292:  MOV.B   80B,W0L
00294:  MOV.B   W0L,80D
....................                 if(Cmand == 1) 
00296:  MOV.B   80D,W0L
00298:  SE      W0,W0
0029A:  CP      W0,#1
0029C:  BRA     NZ,2AE
....................                     spi_prewrite(AmpSPI1); 
0029E:  MOV.B   815,W0L
002A0:  MOV.B   W0L,800
002A2:  MOV.B   800,W0L
002A4:  MOV.B   W0L,268
002A6:  MOV.B   #1,W0L
002A8:  MOV.B   W0L,800
002AA:  GOTO    2DA
....................                 else if(Cmand == 2) 
002AE:  MOV.B   80D,W0L
002B0:  SE      W0,W0
002B2:  CP      W0,#2
002B4:  BRA     NZ,2C6
....................                         spi_prewrite(3); 
002B6:  MOV.B   #3,W0L
002B8:  MOV.B   W0L,800
002BA:  MOV.B   800,W0L
002BC:  MOV.B   W0L,268
002BE:  MOV.B   #1,W0L
002C0:  MOV.B   W0L,800
002C2:  GOTO    2DA
....................                 else if(Cmand == 3) 
002C6:  MOV.B   80D,W0L
002C8:  SE      W0,W0
002CA:  CP      W0,#3
002CC:  BRA     NZ,2DA
....................                         spi_prewrite(ProbeID); 
002CE:  MOV.B   80E,W0L
002D0:  MOV.B   W0L,800
002D2:  MOV.B   800,W0L
002D4:  MOV.B   W0L,268
002D6:  MOV.B   #1,W0L
002D8:  MOV.B   W0L,800
....................                 break; 
002DA:  GOTO    3AE
....................              
....................              
....................             case 3:  
....................                   
....................                 if(Cmand == 1) 
002DE:  MOV.B   80D,W0L
002E0:  SE      W0,W0
002E2:  CP      W0,#1
002E4:  BRA     NZ,2F4
....................                     spi_prewrite(0); 
002E6:  CLR.B   800
002E8:  MOV.B   800,W0L
002EA:  MOV.B   W0L,268
002EC:  MOV.B   #1,W0L
002EE:  MOV.B   W0L,800
002F0:  GOTO    33C
....................                 else if(Cmand == 2) 
002F4:  MOV.B   80D,W0L
002F6:  SE      W0,W0
002F8:  CP      W0,#2
002FA:  BRA     NZ,30E
....................                     {PWM1 = Rx; 
002FC:  MOV.B   80B,W0L
002FE:  MOV.B   W0L,811
....................                     spi_prewrite(0);} 
00300:  CLR.B   800
00302:  MOV.B   800,W0L
00304:  MOV.B   W0L,268
00306:  MOV.B   #1,W0L
00308:  MOV.B   W0L,800
0030A:  GOTO    33C
....................                 else if(Cmand == 3) 
0030E:  MOV.B   80D,W0L
00310:  SE      W0,W0
00312:  CP      W0,#3
00314:  BRA     NZ,324
....................                    spi_prewrite(0); 
00316:  CLR.B   800
00318:  MOV.B   800,W0L
0031A:  MOV.B   W0L,268
0031C:  MOV.B   #1,W0L
0031E:  MOV.B   W0L,800
00320:  GOTO    33C
....................                 else if(Cmand == 7) 
00324:  MOV.B   80D,W0L
00326:  SE      W0,W0
00328:  CP      W0,#7
0032A:  BRA     NZ,33C
....................                     {PWM2 = Rx; 
0032C:  MOV.B   80B,W0L
0032E:  MOV.B   W0L,812
....................                     spi_prewrite(AmpSPI2);} 
00330:  MOV.B   816,W0L
00332:  MOV.B   W0L,800
00334:  MOV.B   800,W0L
00336:  MOV.B   W0L,268
00338:  MOV.B   #1,W0L
0033A:  MOV.B   W0L,800
....................                 break;       
0033C:  GOTO    3AE
....................              
....................              
....................             case 4:  
....................                 Byte_Count = 0;             
00340:  CLR.B   80A
....................                 if(Cmand == 1) 
00342:  MOV.B   80D,W0L
00344:  SE      W0,W0
00346:  CP      W0,#1
00348:  BRA     NZ,358
....................                     spi_prewrite(0); 
0034A:  CLR.B   800
0034C:  MOV.B   800,W0L
0034E:  MOV.B   W0L,268
00350:  MOV.B   #1,W0L
00352:  MOV.B   W0L,800
00354:  GOTO    3A4
....................                 else if(Cmand == 2) 
00358:  MOV.B   80D,W0L
0035A:  SE      W0,W0
0035C:  CP      W0,#2
0035E:  BRA     NZ,374
....................                     {PWM3 = Rx; 
00360:  MOV.B   80B,W0L
00362:  MOV.B   W0L,813
....................                     spi_prewrite(AmpSPI3);} 
00364:  MOV.B   817,W0L
00366:  MOV.B   W0L,800
00368:  MOV.B   800,W0L
0036A:  MOV.B   W0L,268
0036C:  MOV.B   #1,W0L
0036E:  MOV.B   W0L,800
00370:  GOTO    3A4
....................                 else if(Cmand == 3) 
00374:  MOV.B   80D,W0L
00376:  SE      W0,W0
00378:  CP      W0,#3
0037A:  BRA     NZ,38C
....................                     spi_prewrite(AmpSPI1); 
0037C:  MOV.B   815,W0L
0037E:  MOV.B   W0L,800
00380:  MOV.B   800,W0L
00382:  MOV.B   W0L,268
00384:  MOV.B   #1,W0L
00386:  MOV.B   W0L,800
00388:  GOTO    3A4
....................                 else if(Cmand == 7) 
0038C:  MOV.B   80D,W0L
0038E:  SE      W0,W0
00390:  CP      W0,#7
00392:  BRA     NZ,3A4
....................                     {PWM4 = Rx; 
00394:  MOV.B   80B,W0L
00396:  MOV.B   W0L,814
....................                     spi_prewrite(AmpSPI4);} 
00398:  MOV.B   818,W0L
0039A:  MOV.B   W0L,800
0039C:  MOV.B   800,W0L
0039E:  MOV.B   W0L,268
003A0:  MOV.B   #1,W0L
003A2:  MOV.B   W0L,800
....................                 break; 
003A4:  GOTO    3AE
....................                  
....................             default: 
....................                 Byte_Count = 0; 
003A8:  CLR.B   80A
....................                 break; 
003AA:  GOTO    3AE
....................             } 
....................  
003AE:  BCLR.B  88.1
003B0:  MOV     #1A,W0
003B2:  REPEAT  #C
003B4:  MOV     [--W15],[W0--]
003B6:  MOV     [--W15],W0
003B8:  POP     32
003BA:  POP     36
003BC:  POP     42
003BE:  RETFIE  
.................... } 
....................  
....................  
.................... float LP_Filter(int ch) 
....................   { 
....................     float Filter_Out; 
....................     unsigned int16 i,sum, Sample[Sample_Length]; 
....................  
....................     set_adc_channel(ch); 
....................     for(i = 0; i < Sample_Length; i++) 
....................         { 
....................             Sample[i] = read_adc(); 
....................             sum += Sample[i]; 
....................         }     
....................         Filter_Out = (float)sum * Cofficent; 
....................         sum = 0; 
....................     return(Filter_Out);     
....................   } 
....................  
....................  
.................... void main() 
*
00484:  MOV     #3F80,W15
00486:  MOV     #3FFF,W0
00488:  MOV     W0,20
0048A:  NOP     
0048C:  BSET.B  81.7
0048E:  CLR.B   800
00490:  BCLR.B  261.7
00492:  BCLR.B  2E5.0
00494:  BSET.B  2E4.7
00496:  BSET.B  2E5.1
00498:  BSET.B  2E4.6
0049A:  BCLR.B  260.6
0049C:  BCLR.B  263.1
0049E:  CLR     268
004A0:  MOV     #109F,W4
004A2:  MOV     W4,262
004A4:  BSET.B  261.7
004A6:  BCLR.B  2E5.1
004A8:  BSET.B  2E9.1
004AA:  CLR     802
004AC:  MOV     #3E25,W4
004AE:  MOV     W4,804
004B0:  MOV     #CCCD,W0
004B2:  MOV     #3D4C,W1
004B4:  MOV     802,W2
004B6:  MOV     804,W3
004B8:  CALL    3C0
004BC:  MOV     W0,806
004BE:  MOV     W1,808
004C0:  CLR.B   801
004C2:  CLR.B   80A
004C4:  MOV.B   #2,W0L
004C6:  MOV.B   W0L,80E
004C8:  CLR.B   80F
004CA:  MOV.B   #7,W0L
004CC:  MOV.B   W0L,810
004CE:  CLR.B   811
004D0:  CLR.B   812
004D2:  CLR.B   813
004D4:  CLR.B   814
004D6:  MOV.B   #F,W0L
004D8:  MOV.B   W0L,815
004DA:  MOV.B   #19,W0L
004DC:  MOV.B   W0L,816
004DE:  MOV.B   #23,W0L
004E0:  MOV.B   W0L,817
004E2:  MOV.B   #2D,W0L
004E4:  MOV.B   W0L,818
004E6:  SETM    32C
004E8:  SETM    32A
.................... {     
....................    output_float(PIN_G9); // SS as an input 
004EA:  BSET.B  2E5.1
....................    setup_adc_ports(sAN0 | sAN2, VSS_VDD); 
004EC:  MOV     #FFFA,W4
004EE:  MOV     W4,32C
004F0:  SETM    32A
004F2:  CLR     322
....................    setup_adc(ADC_CLOCK_INTERNAL); 
004F4:  MOV     #9F00,W4
004F6:  MOV     W4,324
004F8:  MOV     #84E0,W4
004FA:  MOV     W4,320
....................  
....................     
....................     //Frequency 100Khz set up for PWM 1,2,3,4    
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_1, 39); 
004FC:  CLR     110
004FE:  MOV     #27,W4
00500:  MOV     W4,10C
00502:  MOV     #8000,W4
00504:  MOV     W4,110
....................    setup_compare(2, COMPARE_PWM | COMPARE_TIMER2); 
00506:  MOV     #6,W4
00508:  MOV     W4,18A
....................    set_pwm_duty(2,0); 
0050A:  CLR     186
....................    setup_compare(3, COMPARE_PWM | COMPARE_TIMER2); 
0050C:  MOV     #6,W4
0050E:  MOV     W4,190
....................    set_pwm_duty(3,0); 
00510:  CLR     18C
....................  
....................      
....................    enable_interrupts(INT_SPI2); 
00512:  BSET.B  98.1
....................    enable_interrupts(INTR_GLOBAL); 
00514:  BCLR.B  81.7
00516:  CLR     42
00518:  BSET.B  81.7
....................    set_adc_channel(0);   
0051A:  CLR     328
....................    while(1) 
....................     { 
....................         
....................        duty2 = 0 * 0.4; 
0051C:  CLR     82E
....................        set_pwm_duty(2,duty2); 
0051E:  PUSH    82E
00520:  POP     186
....................         
....................        duty3 = 0 * 0.4; 
00522:  CLR     830
....................        set_pwm_duty(3,duty3); 
00524:  PUSH    830
00526:  POP     18C
....................         
....................  
....................        AmpSPI1  = read_adc(); 
00528:  BCLR.B  320.0
0052A:  BSET.B  320.1
0052C:  BTSS.B  320.0
0052E:  BRA     52C
00530:  MOV.B   300,W0L
00532:  MOV.B   W0L,815
00534:  GOTO    51C
....................        //AmpSPI2  = (int8)LP_Filter(2); 
....................     } 
.................... }    
*
00538:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0082   PR IESO
          H: 0000  
   Word  5L: 00C2   HS OSCIO
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E7   PUT128
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
