CCS PCD C Compiler, Version 5.074, 35380               09-Feb-18 11:13

               Filename:   C:\GitRepo\Heater-Control\510_Heater.X\build\default\production\Main.lst

               ROM used:   2106 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   173 (1%) at main() level
                           322 (2%) worst case
               Stack used: 62 locations (20 in main + 42 for interrupts)
               Stack size: 128

*
00000:  GOTO    736
*
00056:  DATA    2C,02,00
.................... /********************************************************************** 
.................... * Temperature Control  
.................... * © PerkinElmer Health Sciences Canada, Inc., 2017 
.................... * This program is for Heater control U26 on old Board.  
.................... * FileName:        Main.c 
.................... * Processor:       dsPIC33FJ256GP510A 
.................... * Compiler:        CCS v5.074 or Higher 
.................... * Version:      
.................... ************************************************************************/ 
....................  
.................... #include <33FJ256GP510.h> 
.................... //////////// Standard Header file for the DSPIC33FJ256GP510 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device DSPIC33FJ256GP510 
*
00332:  MOV     W5,[W15++]
00334:  MOV     #C,W5
00336:  REPEAT  #4
00338:  MOV     [W5++],[W15++]
0033A:  MOV     W0,W4
0033C:  MOV     W1,W5
0033E:  MOV     W3,W7
00340:  MOV     W2,W6
00342:  BCLR.B  42.0
00344:  BCLR.B  42.1
00346:  RLC     W1,W1
00348:  SWAP    W1
0034A:  AND     #FF,W1
0034C:  CP0     W1
0034E:  BRA     Z,3E6
00350:  BCLR.B  42.0
00352:  BCLR.B  42.1
00354:  RLC     W3,W3
00356:  SWAP    W3
00358:  AND     #FF,W3
0035A:  CP0     W3
0035C:  BRA     Z,3E6
0035E:  ZE      W0,W0
00360:  ADD.B   W3L,W1L,W0L
00362:  BRA     C,36C
00364:  SUB     #7F,W0
00366:  BRA     Z,3E6
00368:  BRA     NC,3E6
0036A:  BRA     370
0036C:  ADD.B   #81,W0L
0036E:  BRA     C,3E6
00370:  XOR     W5,W7,W10
00372:  BCLR.B  42.0
00374:  BCLR.B  42.1
00376:  AND     #FF,W5
00378:  BSET    W5.7
0037A:  BCLR.B  42.0
0037C:  AND     #FF,W7
0037E:  BSET    W7.7
00380:  MUL.UU  W4,W6,W2
00382:  MUL.UU  W5,W6,W8
00384:  ADDC    W8,W3,W3
00386:  MOV     W9,W1
00388:  BTSC.B  42.0
0038A:  INC     W1,W1
0038C:  BCLR.B  42.0
0038E:  MUL.UU  W7,W4,W8
00390:  ADDC    W8,W3,W3
00392:  ADDC    W9,W1,W1
00394:  MUL.UU  W5,W7,W8
00396:  ADDC    W8,W1,W1
00398:  INC     W0,W0
0039A:  CP0     W1
0039C:  BTSC.B  42.1
0039E:  BRA     3A2
003A0:  BRA     3A8
003A2:  CP0     W3
003A4:  BTSC.B  42.1
003A6:  BRA     3B2
003A8:  BTSC    W1.F
003AA:  BRA     3B2
003AC:  RLC     W3,W3
003AE:  RLC     W1,W1
003B0:  DEC     W0,W0
003B2:  MOV     W1,W2
003B4:  BCLR.B  42.0
003B6:  BTSS    W3.7
003B8:  BRA     3CC
003BA:  MOV     #FF00,W7
003BC:  AND     W3,W7,W3
003BE:  ADD     #100,W3
003C0:  ADDC    W2,#0,W2
003C2:  CP0     W2
003C4:  BRA     NZ,3CC
003C6:  CP0     W3
003C8:  BRA     NZ,3CC
003CA:  INC     W0,W0
003CC:  SWAP    W0
003CE:  BCLR.B  42.0
003D0:  BCLR.B  42.1
003D2:  RRC     W0,W1
003D4:  BTSC    W10.F
003D6:  BSET    W1.F
003D8:  BCLR    W2.F
003DA:  SWAP    W2
003DC:  XOR.B   W2L,W1L,W1L
003DE:  SWAP    W3
003E0:  MOV.B   W3L,W2L
003E2:  MOV     W2,W0
003E4:  BRA     3EC
003E6:  MOV     #0,W0
003E8:  MOV     #0,W1
003EA:  BRA     3EC
003EC:  MOV     #14,W5
003EE:  REPEAT  #4
003F0:  MOV     [--W15],[W5--]
003F2:  MOV     [--W15],W5
003F4:  RETURN  
003F6:  MOV     W5,[W15++]
003F8:  MOV     W6,[W15++]
003FA:  MOV     #8E,W1
003FC:  CP0     W0
003FE:  BRA     Z,424
00400:  BTSC    W0.F
00402:  BRA     40C
00404:  BCLR.B  42.0
00406:  RLC     W0,W0
00408:  DEC     W1,W1
0040A:  BRA     400
0040C:  SWAP    W1
0040E:  BCLR.B  42.0
00410:  RRC     W1,W1
00412:  BCLR    W0.F
00414:  SWAP    W0
00416:  XOR.B   W0L,W1L,W1L
00418:  AND.B   #0,W0L
0041A:  BRA     42A
0041C:  MOV.B   W1L,W0L
0041E:  BSET    W1.7
00420:  AND.B   #0,W1L
00422:  BRA     42A
00424:  CLR     W0
00426:  CLR     W1
00428:  BRA     42A
0042A:  MOV     [--W15],W6
0042C:  MOV     [--W15],W5
0042E:  RETURN  
00430:  MOV     W5,[W15++]
00432:  MOV     #C,W5
00434:  REPEAT  #3
00436:  MOV     [W5++],[W15++]
00438:  CLR     W9
0043A:  MOV     #8000,W8
0043C:  BTSC.B  43.0
0043E:  XOR     W8,W3,W3
00440:  CP0     W0
00442:  BRA     NZ,44A
00444:  MOV     #7FFF,W10
00446:  AND     W1,W10,W10
00448:  BTSS.B  42.1
0044A:  MOV     W1,W10
0044C:  XOR     W3,W10,W11
0044E:  MOV     W1,W6
00450:  MOV     W3,W7
00452:  MOV     W3,W12
00454:  BCLR.B  42.1
00456:  BCLR.B  42.0
00458:  RLC     W6,W6
0045A:  SWAP    W6
0045C:  AND     #FF,W6
0045E:  CP0     W6
00460:  BRA     Z,5A4
00462:  BCLR.B  42.1
00464:  BCLR.B  42.0
00466:  RLC     W7,W7
00468:  SWAP    W7
0046A:  AND     #FF,W7
0046C:  CP0     W7
0046E:  BRA     Z,5AE
00470:  BCLR.B  42.1
00472:  BCLR.B  42.0
00474:  CP      W7,W6
00476:  BRA     Z,5B0
00478:  BRA     N,5C0
0047A:  BCLR    W9.0
0047C:  BSET    W9.1
0047E:  SUB     W7,W6,W8
00480:  MOV     W7,W6
00482:  AND     #FF,W1
00484:  BSET    W1.7
00486:  AND     #FF,W3
00488:  BSET    W3.7
0048A:  MOV     #28,W7
0048C:  CP      W7,W8
0048E:  BRA     N,4B2
00490:  BCLR.B  42.1
00492:  BCLR.B  42.0
00494:  RRC     W1,W1
00496:  RRC     W0,W0
00498:  DEC     W8,W8
0049A:  BRA     NZ,490
0049C:  BRA     4B8
0049E:  MOV     #28,W7
004A0:  CP      W7,W8
004A2:  BRA     N,4B6
004A4:  BCLR.B  42.1
004A6:  BCLR.B  42.0
004A8:  RRC     W3,W3
004AA:  RRC     W2,W2
004AC:  DEC     W8,W8
004AE:  BRA     NZ,4A4
004B0:  BRA     4D0
004B2:  MOV     W2,W0
004B4:  MOV     W3,W1
004B6:  BRA     53E
004B8:  BTSS    W11.F
004BA:  BRA     4DE
004BC:  BTSC    W9.4
004BE:  MOV     W12,W11
004C0:  NEG     W0,W0
004C2:  BRA     Z,4C8
004C4:  COM.B   W1L,W1L
004C6:  BRA     4CA
004C8:  NEG     W1,W1
004CA:  BTSC    W9.4
004CC:  BRA     524
004CE:  BRA     4DE
004D0:  BTSS    W11.F
004D2:  BRA     4DE
004D4:  NEG     W2,W2
004D6:  BRA     Z,4DC
004D8:  COM.B   W3L,W3L
004DA:  BRA     4DE
004DC:  NEG     W3,W3
004DE:  AND     #FF,W5
004E0:  BCLR.B  42.1
004E2:  BCLR.B  42.0
004E4:  ADD     W0,W2,W0
004E6:  ADDC.B  W1L,W3L,W1L
004E8:  BTSC.B  42.0
004EA:  BSET    W9.3
004EC:  BTSC    W9.0
004EE:  BRA     502
004F0:  BTSC    W9.1
004F2:  BRA     4F6
004F4:  BRA     50C
004F6:  BTSC    W11.F
004F8:  BRA     524
004FA:  BTSC    W9.3
004FC:  BRA     550
004FE:  BSET    W9.6
00500:  BRA     53E
00502:  BTSC    W11.F
00504:  BRA     524
00506:  BTSC    W9.3
00508:  BRA     550
0050A:  BRA     53E
0050C:  BCLR    W9.2
0050E:  BTSC    W11.F
00510:  BRA     51A
00512:  MOV     W10,W11
00514:  BTSC    W9.3
00516:  BRA     550
00518:  BRA     586
0051A:  BSET    W9.4
0051C:  XOR.B   #80,W1L
0051E:  BTSC    W1.7
00520:  BRA     4BC
00522:  MOV     W10,W11
00524:  AND     #FF,W1
00526:  IOR      W0,  W1,W7
00528:  BRA     Z,53E
0052A:  BTSC    W1.7
0052C:  BRA     53E
0052E:  BCLR.B  42.1
00530:  BCLR.B  42.0
00532:  RLC     W0,W0
00534:  RLC     W1,W1
00536:  DEC     W6,W6
00538:  BTSC.B  42.1
0053A:  BRA     59E
0053C:  BRA     52A
0053E:  BTSC    W9.0
00540:  MOV     W10,W11
00542:  BTSC    W9.1
00544:  MOV     W12,W11
00546:  BTSS    W9.5
00548:  BRA     57E
0054A:  BTSC    W10.F
0054C:  BSET    W0.8
0054E:  BRA     586
00550:  BSET.B  42.0
00552:  RRC.B   W1L,W1L
00554:  RRC     W0,W0
00556:  BTSC.B  42.0
00558:  BSET    W9.5
0055A:  INC     W6,W6
0055C:  BRA     Z,59E
0055E:  BTSS    W9.5
00560:  BRA     572
00562:  INC     W0,W0
00564:  BRA     NZ,572
00566:  INC.B   W1L,W1L
00568:  BRA     NZ,572
0056A:  RRC.B   W1L,W1L
0056C:  RRC     W0,W0
0056E:  INC     W6,W6
00570:  BRA     Z,59E
00572:  BTSC    W9.0
00574:  MOV     W10,W11
00576:  BTSC    W9.1
00578:  MOV     W12,W11
0057A:  BTSC.B  42.1
0057C:  BRA     59E
0057E:  BTSC    W9.6
00580:  MOV     W10,W11
00582:  BTSC    W9.7
00584:  MOV     W12,W11
00586:  IOR      W0,  W1,W2
00588:  BRA     Z,5D0
0058A:  BCLR    W1.7
0058C:  SWAP    W6
0058E:  BCLR.B  42.1
00590:  BCLR.B  42.0
00592:  RRC     W6,W6
00594:  XOR     W6,W1,W1
00596:  BSET    W1.F
00598:  BTSS    W11.F
0059A:  BCLR    W1.F
0059C:  BRA     5D0
0059E:  MOV     #0,W0
005A0:  MOV     #0,W1
005A2:  BRA     5D0
005A4:  BTSC    W10.F
005A6:  XOR     W8,W3,W3
005A8:  MOV     W2,W0
005AA:  MOV     W3,W1
005AC:  BRA     5D0
005AE:  BRA     5D0
005B0:  AND     #FF,W3
005B2:  BSET    W3.7
005B4:  AND     #FF,W1
005B6:  BSET    W1.7
005B8:  BTSC    W11.F
005BA:  BCLR    W3.7
005BC:  BSET    W9.2
005BE:  BRA     4D0
005C0:  SUB     W6,W7,W8
005C2:  AND     #FF,W1
005C4:  BSET    W1.7
005C6:  AND     #FF,W3
005C8:  BSET    W3.7
005CA:  BCLR    W9.1
005CC:  BSET    W9.0
005CE:  BRA     49E
005D0:  MOV     #12,W5
005D2:  REPEAT  #3
005D4:  MOV     [--W15],[W5--]
005D6:  MOV     [--W15],W5
005D8:  RETURN  
005DA:  MOV     W0,W2
005DC:  MOV     W1,W3
005DE:  MOV.B   W1L,W0L
005E0:  SWAP    W0
005E2:  BSET    W0.F
005E4:  RLC     W1,W1
005E6:  SWAP    W1
005E8:  ZE      W1,W1
005EA:  MOV     #8E,W4
005EC:  SUB.B   W4L,W1L,W1L
005EE:  BRA     Z,5FC
005F0:  CP0     W0
005F2:  BRA     Z,5FC
005F4:  BCLR.B  42.0
005F6:  RRC     W0,W0
005F8:  DEC     W1,W1
005FA:  BRA     NZ,5F0
005FC:  BTSS    W3.F
005FE:  BRA     604
00600:  NEG     W0,W0
00602:  BRA     604
00604:  RETURN  
*
00684:  MOV     W5,[W15++]
00686:  MOV     W6,[W15++]
00688:  MOV     #8E,W1
0068A:  BCLR    W6.0
0068C:  BTSS    W0.F
0068E:  BRA     696
00690:  BSET    W6.0
00692:  NEG     W0,W0
00694:  BRA     696
00696:  CP0     W0
00698:  BRA     Z,6C2
0069A:  BTSC    W0.F
0069C:  BRA     6A6
0069E:  BCLR.B  42.0
006A0:  RLC     W0,W0
006A2:  DEC     W1,W1
006A4:  BRA     69A
006A6:  SWAP    W1
006A8:  BCLR.B  42.0
006AA:  RRC     W1,W1
006AC:  BCLR    W0.F
006AE:  SWAP    W0
006B0:  XOR.B   W0L,W1L,W1L
006B2:  AND.B   #0,W0L
006B4:  BTSC    W6.0
006B6:  BSET    W1.F
006B8:  BRA     6C8
006BA:  MOV.B   W1L,W0L
006BC:  BSET    W1.7
006BE:  AND.B   #0,W1L
006C0:  BRA     6C8
006C2:  CLR     W0
006C4:  CLR     W1
006C6:  BRA     6C8
006C8:  MOV     [--W15],W6
006CA:  MOV     [--W15],W5
006CC:  RETURN  
006CE:  MOV     W5,[W15++]
006D0:  MOV     W6,[W15++]
006D2:  MOV     W7,[W15++]
006D4:  XOR     W1,W3,W4
006D6:  BTSS    W4.F
006D8:  BRA     6E6
006DA:  BCLR.B  42.0
006DC:  BCLR.B  42.1
006DE:  BTSS    W1.F
006E0:  BRA     72E
006E2:  BSET.B  42.0
006E4:  BRA     72E
006E6:  MOV     W1,W4
006E8:  MOV     W0,W5
006EA:  MOV     W3,W6
006EC:  MOV     W2,W7
006EE:  RLC     W1,W1
006F0:  SWAP    W1
006F2:  RLC     W3,W3
006F4:  SWAP    W3
006F6:  SUB.B   W3L,W1L,W1L
006F8:  BRA     Z,704
006FA:  BTSS    W4.F
006FC:  BRA     72E
006FE:  MOV     #1,W0
00700:  XOR.B   42
00702:  BRA     72E
00704:  MOV.B   W4L,W1L
00706:  MOV.B   W6L,W3L
00708:  BCLR    W1.7
0070A:  BCLR    W3.7
0070C:  SUB.B   W3L,W1L,W1L
0070E:  BRA     Z,71A
00710:  BTSS    W4.F
00712:  BRA     72E
00714:  MOV     #1,W0
00716:  XOR.B   42
00718:  BRA     72E
0071A:  SUB     W7,W5,W1
0071C:  BRA     Z,728
0071E:  BTSS    W4.F
00720:  BRA     72E
00722:  MOV     #1,W0
00724:  XOR.B   42
00726:  BRA     72E
00728:  BCLR.B  42.0
0072A:  BRA     72E
0072C:  BRA     72E
0072E:  MOV     [--W15],W7
00730:  MOV     [--W15],W6
00732:  MOV     [--W15],W5
00734:  RETURN  
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #device ADC = 12  
.................... #use delay(clock = 100MHz, crystal=40MHz) 
.................... #use spi(SLAVE, SPI2, BITS = 8, MODE = 1, ENABLE = PIN_G9, stream = SPI_2) 
*
00200:  MOV     W5,[W15++]
00202:  MOV     #8,W3
00204:  CP      W2,#8
00206:  BRA     Z,216
00208:  MOV     #9,W3
0020A:  CP      W2,#10
0020C:  BRA     Z,216
0020E:  MOV     #A,W3
00210:  CP      W2,#18
00212:  BRA     Z,216
00214:  MOV     #B,W3
00216:  BTSS.B  260.0
00218:  BRA     216
0021A:  MOV.B   268,W0L
0021C:  MOV.B   W0L,[W3--]
0021E:  BCLR.B  260.6
00220:  SUB.B   #8,W2L
00222:  BRA     GTU,216
00224:  MOV     W4,W0
00226:  MOV     W5,W1
00228:  MOV     [--W15],W5
0022A:  RETURN  
....................  
....................  
.................... /******************************************************************************/ 
.................... // Moving Average FIlter Parameters 
.................... // Alpha = 0.1611328125 = 660/4096 ; 660 is maximum temperature value; 5mV/ 1C change 
.................... #define Sample_Length  5 
.................... float Alpha = 0.1611328125; 
.................... float Cofficent = (1/(float)Sample_Length) * Alpha; 
.................... /******************************************************************************/ 
.................... // PID Parameters// 
....................  
.................... /******************************************************************************/ 
....................  
.................... int8 SPI_Flag = 0, Byte_Count = 0, Rx, Tx, Cmand, ProbeID = 2,count = 0; 
.................... int8 Version = 7,SP = 0, Temp, LTMR, MV; 
.................... int Value, Duty; 
.................... float  Kp = 0.5, C_out = 0, Set_Point, M_Variable, Error; 
....................  
.................... /******************************************************************************/ 
.................... // 8 bits SPI 
.................... #INT_SPI2 
....................  
....................  
.................... void spi2_slave_isr(void) 
0022C:  PUSH    42
0022E:  PUSH    36
00230:  PUSH    32
00232:  MOV     W0,[W15++]
00234:  MOV     #2,W0
00236:  REPEAT  #C
00238:  MOV     [W0++],[W15++]
.................... { 
....................   Rx = spi_xfer_in(SPI_2, 8); 
0023A:  MOV     #8,W2
0023C:  CALL    200
00240:  MOV.B   W0L,80B
....................   Byte_Count++;  
00242:  INC.B   080A
....................   
....................   switch(Byte_Count) 
00244:  MOV.B   80A,W0L
00246:  SE      W0,W0
00248:  XOR     #1,W0
0024A:  BRA     Z,25A
0024C:  XOR     #3,W0
0024E:  BRA     Z,292
00250:  XOR     #1,W0
00252:  BRA     Z,2C6
00254:  XOR     #7,W0
00256:  BRA     Z,2F2
00258:  BRA     31A
....................             { 
....................             case 1: 
....................                 spi_prewrite(Version); 
0025A:  MOV.B   810,W0L
0025C:  MOV.B   W0L,800
0025E:  MOV.B   800,W0L
00260:  MOV.B   W0L,268
00262:  MOV.B   #1,W0L
00264:  MOV.B   W0L,800
....................                 if(Cmand == 1) 
00266:  MOV.B   80D,W0L
00268:  SE      W0,W0
0026A:  CP      W0,#1
0026C:  BRA     NZ,27C
....................                     spi_prewrite(0); 
0026E:  CLR.B   800
00270:  MOV.B   800,W0L
00272:  MOV.B   W0L,268
00274:  MOV.B   #1,W0L
00276:  MOV.B   W0L,800
00278:  GOTO    28E
....................                 else if(Cmand == 2) 
0027C:  MOV.B   80D,W0L
0027E:  SE      W0,W0
00280:  CP      W0,#2
00282:  BRA     NZ,28E
....................                     spi_prewrite(0); 
00284:  CLR.B   800
00286:  MOV.B   800,W0L
00288:  MOV.B   W0L,268
0028A:  MOV.B   #1,W0L
0028C:  MOV.B   W0L,800
....................                 break; 
0028E:  GOTO    320
....................        
....................             case 2:  
....................                 Cmand = Rx; 
00292:  MOV.B   80B,W0L
00294:  MOV.B   W0L,80D
....................                 if(Cmand == 1) 
00296:  MOV.B   80D,W0L
00298:  SE      W0,W0
0029A:  CP      W0,#1
0029C:  BRA     NZ,2AE
....................                     spi_prewrite(MV); 
0029E:  MOV.B   814,W0L
002A0:  MOV.B   W0L,800
002A2:  MOV.B   800,W0L
002A4:  MOV.B   W0L,268
002A6:  MOV.B   #1,W0L
002A8:  MOV.B   W0L,800
002AA:  GOTO    2C2
....................                 else if(Cmand == 3) 
002AE:  MOV.B   80D,W0L
002B0:  SE      W0,W0
002B2:  CP      W0,#3
002B4:  BRA     NZ,2C2
....................                         spi_prewrite(ProbeID); 
002B6:  MOV.B   80E,W0L
002B8:  MOV.B   W0L,800
002BA:  MOV.B   800,W0L
002BC:  MOV.B   W0L,268
002BE:  MOV.B   #1,W0L
002C0:  MOV.B   W0L,800
....................                 break; 
002C2:  GOTO    320
....................              
....................             case 3:  
....................                   
....................                 if(Cmand == 1) 
002C6:  MOV.B   80D,W0L
002C8:  SE      W0,W0
002CA:  CP      W0,#1
002CC:  BRA     NZ,2DC
....................                     spi_prewrite(0); 
002CE:  CLR.B   800
002D0:  MOV.B   800,W0L
002D2:  MOV.B   W0L,268
002D4:  MOV.B   #1,W0L
002D6:  MOV.B   W0L,800
002D8:  GOTO    2EE
....................                 else if(Cmand == 3) 
002DC:  MOV.B   80D,W0L
002DE:  SE      W0,W0
002E0:  CP      W0,#3
002E2:  BRA     NZ,2EE
....................                    spi_prewrite(0); 
002E4:  CLR.B   800
002E6:  MOV.B   800,W0L
002E8:  MOV.B   W0L,268
002EA:  MOV.B   #1,W0L
002EC:  MOV.B   W0L,800
....................                 break;       
002EE:  GOTO    320
....................              
....................              
....................             case 4:  
....................                 Byte_Count = 0;             
002F2:  CLR.B   80A
....................                 if(Cmand == 1) 
002F4:  MOV.B   80D,W0L
002F6:  SE      W0,W0
002F8:  CP      W0,#1
002FA:  BRA     NZ,304
....................                     SP = Rx; 
002FC:  MOV.B   80B,W0L
002FE:  MOV.B   W0L,811
00300:  GOTO    316
....................                 else if(Cmand == 3) 
00304:  MOV.B   80D,W0L
00306:  SE      W0,W0
00308:  CP      W0,#3
0030A:  BRA     NZ,316
....................                     spi_prewrite(0); 
0030C:  CLR.B   800
0030E:  MOV.B   800,W0L
00310:  MOV.B   W0L,268
00312:  MOV.B   #1,W0L
00314:  MOV.B   W0L,800
....................                 break; 
00316:  GOTO    320
....................                  
....................             default: 
....................                 Byte_Count = 0; 
0031A:  CLR.B   80A
....................                 break; 
0031C:  GOTO    320
....................             } 
....................  
00320:  BCLR.B  88.1
00322:  MOV     #1A,W0
00324:  REPEAT  #C
00326:  MOV     [--W15],[W0--]
00328:  MOV     [--W15],W0
0032A:  POP     32
0032C:  POP     36
0032E:  POP     42
00330:  RETFIE  
.................... } 
....................  
....................  
....................  
.................... LP_Filter(int ch) 
*
00606:  MOV     W5,[W15++]
00608:  MOV     W6,[W15++]
....................   { 
....................     float Filter_Out; 
....................     unsigned int16 i,sum, Sample[Sample_Length]; 
....................  
....................     set_adc_channel(ch); 
0060A:  PUSH    82E
0060C:  POP     328
....................     for(i = 0; i < Sample_Length; i++) 
0060E:  CLR     834
00610:  MOV     834,W4
00612:  CP      W4,#5
00614:  BRA     C,63E
....................         { 
....................             Sample[i] = read_adc(); 
00616:  MOV     834,W0
00618:  SL      W0,#1,W0
0061A:  MOV     #838,W4
0061C:  ADD     W0,W4,W5
0061E:  BCLR.B  320.0
00620:  BSET.B  320.1
00622:  BTSS.B  320.0
00624:  BRA     622
00626:  MOV     300,W4
00628:  MOV     W4,[W5+#0]
....................             sum += Sample[i]; 
0062A:  MOV     834,W0
0062C:  SL      W0,#1,W0
0062E:  MOV     #838,W4
00630:  ADD     W0,W4,W0
00632:  MOV     W0,W4
00634:  MOV     [W4],W0
00636:  ADD     836
00638:  INC     0834
0063A:  GOTO    610
....................         }     
....................         //Filter_Out = ((float)sum * Cofficent) + 12; 
....................         M_Variable = ((float)sum * Cofficent) + 12; 
0063E:  MOV     836,W0
00640:  CALL    3F6
00644:  MOV     W0,W5
00646:  MOV     W1,W6
00648:  MOV     W5,W0
0064A:  MOV     W6,W1
0064C:  MOV     806,W2
0064E:  MOV     808,W3
00650:  CALL    332
00654:  MOV     W0,W5
00656:  MOV     W1,W6
00658:  BCLR.B  43.0
0065A:  MOV     W5,W0
0065C:  MOV     W6,W1
0065E:  MOV     #0,W2
00660:  MOV     #4140,W3
00662:  CALL    430
00666:  MOV     W0,826
00668:  MOV     W1,828
....................         MV  = (int8)M_Variable; 
0066A:  MOV     826,W0
0066C:  MOV     828,W1
0066E:  CALL    5DA
00672:  MOV.B   W0L,814
....................         sum = 0; 
00674:  CLR     836
....................     return(Filter_Out);     
00676:  MOV     830,W0
00678:  MOV     832,W1
0067A:  CALL    5DA
0067E:  MOV     [--W15],W6
00680:  MOV     [--W15],W5
00682:  RETURN  
....................   } 
....................  
.................... /*#INT_TIMER1 
.................... void  timer1_isr(void)  
.................... { 
....................     LTMR = 1; 
....................  
.................... }*/ 
....................  
....................  
.................... void main() 
*
00736:  MOV     #3F80,W15
00738:  MOV     #3FFF,W0
0073A:  MOV     W0,20
0073C:  NOP     
0073E:  BSET.B  81.7
00740:  MOV     #17,W4
00742:  MOV     W4,746
00744:  MOV     #3,W4
00746:  MOV     W4,744
00748:  DISI    #E
0074A:  MOV     #103,W0
0074C:  MOV     #743,W1
0074E:  MOV     #78,W2
00750:  MOV     #9A,W3
00752:  MOV.B   W2L,[W1]
00754:  MOV.B   W3L,[W1]
00756:  MOV.B   W0L,743
00758:  LSR     W0,#8,W0
0075A:  MOV     #742,W1
0075C:  MOV     #46,W2
0075E:  MOV     #57,W3
00760:  MOV.B   W2L,[W1]
00762:  MOV.B   W3L,[W1]
00764:  MOV.B   W0L,[W1]
00766:  CLR.B   800
00768:  BCLR.B  261.7
0076A:  BCLR.B  2E5.0
0076C:  BSET.B  2E4.7
0076E:  BSET.B  2E5.1
00770:  BSET.B  2E4.6
00772:  BCLR.B  260.6
00774:  BCLR.B  263.1
00776:  CLR     268
00778:  MOV     #1097,W4
0077A:  MOV     W4,262
0077C:  BSET.B  261.7
0077E:  BCLR.B  2E5.1
00780:  BSET.B  2E9.1
00782:  CLR     802
00784:  MOV     #3E25,W4
00786:  MOV     W4,804
00788:  MOV     #CCCD,W0
0078A:  MOV     #3E4C,W1
0078C:  MOV     802,W2
0078E:  MOV     804,W3
00790:  CALL    332
00794:  MOV     W0,806
00796:  MOV     W1,808
00798:  CLR.B   801
0079A:  CLR.B   80A
0079C:  MOV.B   #2,W0L
0079E:  MOV.B   W0L,80E
007A0:  CLR.B   80F
007A2:  MOV.B   #7,W0L
007A4:  MOV.B   W0L,810
007A6:  CLR.B   811
007A8:  CLR     81A
007AA:  MOV     #3F00,W4
007AC:  MOV     W4,81C
007AE:  CLR     81E
007B0:  CLR     820
007B2:  SETM    32C
007B4:  SETM    32A
.................... {     
....................    output_float(PIN_G9); // SS as an input 
007B6:  BSET.B  2E5.1
....................    setup_adc_ports(sAN0, VSS_VDD); 
007B8:  MOV     #FFFE,W4
007BA:  MOV     W4,32C
007BC:  SETM    32A
007BE:  CLR     322
....................    setup_adc(ADC_CLOCK_INTERNAL); 
007C0:  MOV     #9F00,W4
007C2:  MOV     W4,324
007C4:  MOV     #84E0,W4
007C6:  MOV     W4,320
....................    // Timer 1 for 100ms INT 
....................    //setup_timer1(TMR_INTERNAL | TMR_DIV_BY_256, 7812);  
....................  
....................     //Frequency 258 Hz set up for PWM 2,3    
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_256, 100); 
007C8:  CLR     110
007CA:  MOV     #64,W4
007CC:  MOV     W4,10C
007CE:  MOV     #8030,W4
007D0:  MOV     W4,110
....................    setup_compare(2, COMPARE_PWM | COMPARE_TIMER2); 
007D2:  MOV     #6,W4
007D4:  MOV     W4,18A
....................    set_pwm_duty(2,0); 
007D6:  CLR     186
....................  
....................    //enable_interrupts(INT_TIMER1);  
....................    enable_interrupts(INT_SPI2); 
007D8:  BSET.B  98.1
....................    enable_interrupts(INTR_GLOBAL); 
007DA:  BCLR.B  81.7
007DC:  CLR     42
007DE:  BSET.B  81.7
....................    while(1) 
....................     { 
....................  
....................        LP_Filter(0); 
007E0:  CLR     82E
007E2:  CALL    606
....................        Set_Point = (float)SP; 
007E6:  MOV.B   811,W0L
007E8:  SE      W0,W0
007EA:  CALL    684
007EE:  MOV     W0,822
007F0:  MOV     W1,824
....................        Error = Set_Point - M_Variable; 
007F2:  BSET.B  43.0
007F4:  MOV     822,W0
007F6:  MOV     824,W1
007F8:  MOV     826,W2
007FA:  MOV     828,W3
007FC:  CALL    430
00800:  MOV     W0,82A
00802:  MOV     W1,82C
....................             if(Error < 0) 
00804:  MOV     82A,W0
00806:  MOV     82C,W1
00808:  MOV     #0,W2
0080A:  MOV     #0,W3
0080C:  CALL    6CE
00810:  BRA     NC,816
....................                 Error = 0; 
00812:  CLR     82A
00814:  CLR     82C
....................         C_out = Kp * Error; 
00816:  MOV     81A,W0
00818:  MOV     81C,W1
0081A:  MOV     82A,W2
0081C:  MOV     82C,W3
0081E:  CALL    332
00822:  MOV     W0,81E
00824:  MOV     W1,820
....................         Duty = (int)C_out; 
00826:  MOV     81E,W0
00828:  MOV     820,W1
0082A:  CALL    5DA
0082E:  MOV     W0,818
....................         set_pwm_duty(2,Duty); 
00830:  PUSH    818
00832:  POP     186
00834:  GOTO    7E0
....................     } 
.................... }    
*
00838:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0080   FRC IESO
          H: 0000  
   Word  5L: 0042   HS OSCIO CKSNOFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E7   PUT128
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
