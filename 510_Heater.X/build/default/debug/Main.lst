CCS PCD C Compiler, Version 5.074, 35380               29-Sep-17 11:06

               Filename:   C:\Users\SinghHy\Documents\PIC Micro\510_Heater.X\build\default\debug\Main.lst

               ROM used:   1244 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   192 (1%) at main() level
                           198 (1%) worst case
               Stack used: 52 locations (0 in main + 52 for interrupts)
               Stack size: 144

*
00000:  GOTO    420
*
0001A:  DATA    CE,03,00
*
00056:  DATA    2C,02,00
.................... /********************************************************************** 
.................... * Temperature Control  
.................... * © PerkinElmer Health Sciences Canada, Inc., 2017 
.................... * This program is for Heater control U26.  
.................... * FileName:        Main.c 
.................... * Dependencies:    Header (33FJ256GP710A.h) files 
.................... * Processor:       dsPIC33FJ256GP510A 
.................... * Compiler:        CCS v5.074 or Higher 
.................... * Version:      
.................... ************************************************************************/ 
....................  
.................... #include <33FJ256GP510.h> 
.................... //////////// Standard Header file for the DSPIC33FJ256GP510 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device DSPIC33FJ256GP510 
*
002CA:  MOV     W5,[W15++]
002CC:  MOV     W6,[W15++]
002CE:  MOV     #8E,W1
002D0:  CP0     W0
002D2:  BRA     Z,2F8
002D4:  BTSC    W0.F
002D6:  BRA     2E0
002D8:  BCLR.B  42.0
002DA:  RLC     W0,W0
002DC:  DEC     W1,W1
002DE:  BRA     2D4
002E0:  SWAP    W1
002E2:  BCLR.B  42.0
002E4:  RRC     W1,W1
002E6:  BCLR    W0.F
002E8:  SWAP    W0
002EA:  XOR.B   W0L,W1L,W1L
002EC:  AND.B   #0,W0L
002EE:  BRA     2FE
002F0:  MOV.B   W1L,W0L
002F2:  BSET    W1.7
002F4:  AND.B   #0,W1L
002F6:  BRA     2FE
002F8:  CLR     W0
002FA:  CLR     W1
002FC:  BRA     2FE
002FE:  MOV     [--W15],W6
00300:  MOV     [--W15],W5
00302:  RETURN  
00304:  MOV     W5,[W15++]
00306:  MOV     #C,W5
00308:  REPEAT  #4
0030A:  MOV     [W5++],[W15++]
0030C:  CLR     W9
0030E:  XOR     W1,W3,W9
00310:  MOV     W1,W6
00312:  MOV     W0,W5
00314:  MOV     W3,W8
00316:  MOV     W2,W7
00318:  RLC     W1,W1
0031A:  SWAP    W1
0031C:  ZE      W1,W1
0031E:  CP0     W1
00320:  BRA     Z,3BE
00322:  RLC     W3,W3
00324:  SWAP    W3
00326:  ZE      W3,W3
00328:  CP0     W3
0032A:  BRA     Z,3BE
0032C:  CLR     W0
0032E:  SUB.B   W1L,W3L,W0L
00330:  BRA     NC,338
00332:  ADD.B   #7F,W0L
00334:  BRA     C,3BE
00336:  BRA     33E
00338:  SUB.B   #81,W0L
0033A:  BRA     NC,3BE
0033C:  BRA     Z,3BE
0033E:  MOV     W5,W1
00340:  MOV     W6,W2
00342:  BSET    W2.7
00344:  AND     #FF,W2
00346:  AND     #FF,W8
00348:  BSET    W8.7
0034A:  MOV     #19,W10
0034C:  CLR     W3
0034E:  CLR     W4
00350:  SUB     W1,W7,W1
00352:  SUBB    W2,W8,W2
00354:  BRA     N,35A
00356:  BRA     C,360
00358:  BRA     NZ,362
0035A:  ADD     W1,W7,W1
0035C:  ADDC    W2,W8,W2
0035E:  BRA     362
00360:  BSET    W4.0
00362:  DEC     W10,W10
00364:  BRA     Z,374
00366:  BCLR.B  42.0
00368:  RLC     W1,W1
0036A:  RLC     W2,W2
0036C:  BCLR.B  42.0
0036E:  RLC     W4,W4
00370:  RLC     W3,W3
00372:  BRA     350
00374:  CLR     W10
00376:  BTSC    W3.8
00378:  BRA     37C
0037A:  BRA     388
0037C:  BCLR.B  42.0
0037E:  RRC     W3,W3
00380:  BCLR    W3.7
00382:  RRC     W4,W4
00384:  RLC     W10,W10
00386:  BRA     38C
00388:  DEC     W0,W0
0038A:  BRA     Z,3BE
0038C:  BTSC    W10.F
0038E:  BRA     NC,39A
00390:  RLC     W1,W1
00392:  RLC     W2,W2
00394:  SUB     W1,W7,W1
00396:  SUBB    W2,W8,W2
00398:  BRA     NC,3AC
0039A:  INC     W4,W4
0039C:  BRA     NZ,3AC
0039E:  INC     W3,W3
003A0:  BRA     NZ,3AC
003A2:  INC     W0,W0
003A4:  BRA     Z,3BE
003A6:  BRA     3AC
003A8:  DEC     W0,W0
003AA:  BRA     Z,3BE
003AC:  SWAP    W0
003AE:  RRC     W0,W1
003B0:  BSET    W1.F
003B2:  BTSS    W9.F
003B4:  BCLR    W1.F
003B6:  BCLR    W3.7
003B8:  XOR.B   W3L,W1L,W1L
003BA:  MOV     W4,W0
003BC:  BRA     3C4
003BE:  MOV     #0,W0
003C0:  MOV     #0,W1
003C2:  BRA     3C4
003C4:  MOV     #14,W5
003C6:  REPEAT  #4
003C8:  MOV     [--W15],[W5--]
003CA:  MOV     [--W15],W5
003CC:  RETURN  
....................  
.................... #list 
....................  
.................... #device ADC=12 //Enable 12 - bit ADC 
.................... #fuses HS,NOWDT,NOPROTECT 
.................... #use delay(crystal=40MHz) 
.................... #use spi(SLAVE, SPI2, BITS = 8, MODE = 0, ENABLE = PIN_G9, stream = SPI_2) 
*
00200:  MOV     W5,[W15++]
00202:  MOV     #8,W3
00204:  CP      W2,#8
00206:  BRA     Z,216
00208:  MOV     #9,W3
0020A:  CP      W2,#10
0020C:  BRA     Z,216
0020E:  MOV     #A,W3
00210:  CP      W2,#18
00212:  BRA     Z,216
00214:  MOV     #B,W3
00216:  BTSS.B  260.0
00218:  BRA     216
0021A:  MOV.B   268,W0L
0021C:  MOV.B   W0L,[W3--]
0021E:  BCLR.B  260.6
00220:  SUB.B   #8,W2L
00222:  BRA     GTU,216
00224:  MOV     W4,W0
00226:  MOV     W5,W1
00228:  MOV     [--W15],W5
0022A:  RETURN  
....................  
.................... // ADC channel Names 
.................... #define TC1 2 
.................... #define HV_Monitor_2 0 
....................  
....................  
.................... unsigned int16  Body_Temperature = 0,duty = 0, T_line_Heater = 0;  
.................... unsigned long int16 Flange_Heater_PWM = 20; 
.................... unsigned int8 Data = 0x18, Sample, SPI_Flag = 0; 
.................... float Controller_Out = 0, PV = 0, Error = 0, Old_Error = 0; 
.................... unsigned int32  SPI_Buffer_2 = 0, SPI_Buffer_1 = 0; 
.................... unsigned int8 CP1 = 0,CP2 = 0,CP3 = 0,CP4 = 0, CP5 = 0,CP6 = 0,CP7 = 0,CP8 = 0; 
.................... unsigned int8 Version = 20; 
....................  
....................  
.................... void PID_Loop(void) 
.................... { 
....................     float MV, PV, Error; 
....................      
....................     /*if(Error > 0) 
....................         Controller_Out--; 
....................     else if(Error < 0) 
....................             Controller_Out++;*/ 
....................     MV = PV/4095; 
....................     Flange_Heater_PWM = Controller_Out * 40; //for PWM output 
....................     Sample = 0; 
....................  
.................... } 
....................  
....................  
....................  
.................... #INT_SPI2 level = 7 
....................  
.................... void spi2_slave_isr(void) 
0022C:  PUSH    42
0022E:  PUSH    36
00230:  PUSH    32
00232:  MOV     W0,[W15++]
00234:  MOV     #2,W0
00236:  REPEAT  #C
00238:  MOV     [W0++],[W15++]
.................... { 
....................   SPI_Flag++;   
0023A:  INC.B   0867
....................   switch(SPI_Flag) 
0023C:  MOV.B   867,W0L
0023E:  CLR.B   1
00240:  XOR     #1,W0
00242:  BRA     Z,24A
00244:  XOR     #3,W0
00246:  BRA     Z,280
00248:  BRA     2B8
....................    { 
....................       case 1: 
....................  
....................             SPI_Buffer_1 = spi_xfer_in(SPI_2, 32); 
0024A:  MOV     #20,W2
0024C:  CALL    200
00250:  MOV     W0,87C
00252:  MOV     W1,87E
....................             CP1 = (SPI_Buffer_1 & 0xff000000UL) >> 24; 
00254:  CLR     W5
00256:  MOV     #FF00,W0
00258:  AND     87E,W0
0025A:  MOV     W0,W6
0025C:  MOV.B   D,W0L
0025E:  MOV.B   W0L,880
....................             CP2 = (SPI_Buffer_1 & 0x00ff0000UL) >> 16; 
00260:  CLR     W5
00262:  MOV     87E,W6
00264:  AND     #FF,W6
00266:  MOV.B   W6L,W0L
00268:  MOV.B   W0L,881
....................             CP3 = (SPI_Buffer_1 & 0x0000ff00UL) >>  8; 
0026A:  MOV     #FF00,W0
0026C:  AND     87C,W0
0026E:  MOV     W0,W5
00270:  CLR     W6
00272:  MOV.B   B,W0L
00274:  MOV.B   W0L,882
....................             CP4 = (SPI_Buffer_1 & 0x000000ffUL)      ; 
00276:  MOV     87C,W4
00278:  MOV.B   W4L,W0L
0027A:  MOV.B   W0L,883
....................  
....................          break; 
0027C:  GOTO    2B8
....................       case 2:  
....................            
....................             SPI_Buffer_2 = spi_xfer_in(SPI_2, 32); 
00280:  MOV     #20,W2
00282:  CALL    200
00286:  MOV     W0,878
00288:  MOV     W1,87A
....................             CP5 = (SPI_Buffer_2 & 0xff000000UL) >> 24; 
0028A:  CLR     W5
0028C:  MOV     #FF00,W0
0028E:  AND     87A,W0
00290:  MOV     W0,W6
00292:  MOV.B   D,W0L
00294:  MOV.B   W0L,884
....................             CP6 = (SPI_Buffer_2 & 0x00ff0000UL) >> 16; 
00296:  CLR     W5
00298:  MOV     87A,W6
0029A:  AND     #FF,W6
0029C:  MOV.B   W6L,W0L
0029E:  MOV.B   W0L,885
....................             CP7 = (SPI_Buffer_2 & 0x0000ff00UL) >>  8; 
002A0:  MOV     #FF00,W0
002A2:  AND     878,W0
002A4:  MOV     W0,W5
002A6:  CLR     W6
002A8:  MOV.B   B,W0L
002AA:  MOV.B   W0L,886
....................             CP8 = (SPI_Buffer_2 & 0x000000ffUL)      ; 
002AC:  MOV     878,W4
002AE:  MOV.B   W4L,W0L
002B0:  MOV.B   W0L,887
....................             SPI_Flag = 0; 
002B2:  CLR.B   867
....................             break; 
002B4:  GOTO    2B8
....................     } 
....................      
.................... } 
....................  
002B8:  BCLR.B  88.1
002BA:  MOV     #1A,W0
002BC:  REPEAT  #C
002BE:  MOV     [--W15],[W0--]
002C0:  MOV     [--W15],W0
002C2:  POP     32
002C4:  POP     36
002C6:  POP     42
002C8:  RETFIE  
.................... #int_timer1 level = 6 
....................  
.................... void timer1_isr() 
*
003CE:  PUSH    42
003D0:  PUSH    36
003D2:  PUSH    32
003D4:  MOV     W0,[W15++]
003D6:  MOV     #2,W0
003D8:  REPEAT  #C
003DA:  MOV     [W0++],[W15++]
.................... { 
....................      
....................     Body_Temperature = read_adc(); 
003DC:  BCLR.B  320.0
003DE:  BSET.B  320.1
003E0:  BTSS.B  320.0
003E2:  BRA     3E0
003E4:  PUSH    300
003E6:  POP     85C
....................     Controller_Out = ((float)read_adc()/4095); 
003E8:  BCLR.B  320.0
003EA:  BSET.B  320.1
003EC:  BTSS.B  320.0
003EE:  BRA     3EC
003F0:  MOV     300,W0
003F2:  CALL    2CA
003F6:  MOV     W0,W5
003F8:  MOV     W1,W6
003FA:  MOV     W5,W0
003FC:  MOV     W6,W1
003FE:  MOV     #F000,W2
00400:  MOV     #457F,W3
00402:  CALL    304
00406:  MOV     W0,868
00408:  MOV     W1,86A
....................     Sample = 1; 
0040A:  MOV.B   #1,W0L
0040C:  MOV.B   W0L,866
0040E:  BCLR.B  84.3
00410:  MOV     #1A,W0
00412:  REPEAT  #C
00414:  MOV     [--W15],[W0--]
00416:  MOV     [--W15],W0
00418:  POP     32
0041A:  POP     36
0041C:  POP     42
0041E:  RETFIE  
.................... } 
....................  
....................  
....................  
.................... void main() 
00420:  MOV     #3F70,W15
00422:  MOV     #3FFF,W0
00424:  MOV     W0,20
00426:  NOP     
00428:  MOV     #6444,W0
0042A:  MOV     W0,A4
0042C:  MOV     #4474,W0
0042E:  MOV     W0,B4
00430:  BSET.B  81.7
00432:  CLR.B   85A
00434:  BCLR.B  261.7
00436:  BCLR.B  2E5.0
00438:  BSET.B  2E4.7
0043A:  BSET.B  2E5.1
0043C:  BSET.B  2E4.6
0043E:  BCLR.B  260.6
00440:  BCLR.B  263.1
00442:  CLR     268
00444:  MOV     #119F,W4
00446:  MOV     W4,262
00448:  BSET.B  261.7
0044A:  BCLR.B  2E5.1
0044C:  BSET.B  2E9.1
0044E:  CLR     85C
00450:  CLR     85E
00452:  CLR     860
00454:  MOV     #14,W4
00456:  MOV     W4,862
00458:  CLR     864
0045A:  MOV.B   #18,W0L
0045C:  MOV.B   W0L,85B
0045E:  CLR.B   867
00460:  CLR     868
00462:  CLR     86A
00464:  CLR     86C
00466:  CLR     86E
00468:  CLR     870
0046A:  CLR     872
0046C:  CLR     874
0046E:  CLR     876
00470:  CLR     878
00472:  CLR     87A
00474:  CLR     87C
00476:  CLR     87E
00478:  CLR.B   880
0047A:  CLR.B   881
0047C:  CLR.B   882
0047E:  CLR.B   883
00480:  CLR.B   884
00482:  CLR.B   885
00484:  CLR.B   886
00486:  CLR.B   887
00488:  MOV.B   #14,W0L
0048A:  MOV.B   W0L,888
0048C:  SETM    32C
0048E:  SETM    32A
.................... { 
....................  
....................      
....................     //Frequency set up for PWM     
....................     setup_timer2(TMR_INTERNAL | TMR_DIV_BY_1, 39); 
00490:  CLR     110
00492:  MOV     #27,W4
00494:  MOV     W4,10C
00496:  MOV     #8000,W4
00498:  MOV     W4,110
....................     setup_compare(3, COMPARE_PWM | COMPARE_TIMER2); 
0049A:  MOV     #6,W4
0049C:  MOV     W4,190
....................  
....................     
....................    setup_adc_ports(sAN0 | sAN2, VSS_VDD); 
0049E:  MOV     #FFFA,W4
004A0:  MOV     W4,32C
004A2:  SETM    32A
004A4:  CLR     322
....................    setup_adc(ADC_CLOCK_INTERNAL); 
004A6:  MOV     #9F00,W4
004A8:  MOV     W4,324
004AA:  MOV     #84E0,W4
004AC:  MOV     W4,320
....................    set_adc_channel(TC1); 
004AE:  MOV     #2,W4
004B0:  MOV     W4,328
....................     
....................    // Sampling rate setup for TC1 at 100ms// 
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_8, 50000); 
004B2:  CLR     104
004B4:  MOV     #C350,W4
004B6:  MOV     W4,102
004B8:  MOV     #8010,W4
004BA:  MOV     W4,104
....................    enable_interrupts(INT_TIMER1); 
004BC:  BSET.B  94.3
....................    enable_interrupts(INT_SPI2); 
004BE:  BSET.B  98.1
....................    enable_interrupts(INTR_GLOBAL); 
004C0:  BCLR.B  81.7
004C2:  CLR     42
004C4:  BSET.B  81.7
....................    set_timer1(0); 
004C6:  CLR     100
....................  
....................    /* Main loop starts*/ 
....................     while(1) 
....................     { 
....................         if(Sample) 
004C8:  CP0.B   866
004CA:  BRA     Z,4D6
....................             { 
....................                 Old_Error = Error;  
004CC:  PUSH    870
004CE:  POP     874
004D0:  PUSH    872
004D2:  POP     876
....................                 //PID_Loop(); 
....................                 set_pwm_duty(3,0); 
004D4:  CLR     18C
....................             } 
004D6:  GOTO    4C8
....................  
....................     } 
.................... } 
*
004DA:  BRA     4DA

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0082   PR IESO
          H: 0000  
   Word  5L: 00C2   HS OSCIO
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E0   NOPUT
          H: 0000  
   Word  8L: 0043   ICSP1 NOJTAG DEBUG
          H: 0000  

   Some fuses have been forced to be compatible with the ICD debugger.
